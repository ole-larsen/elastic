services:
  es01:
    image: olelarsen/elasticsearch
    container_name: es01
    volumes:
      - es01logs:/usr/share/elasticsearch/logs
      - certificates:/usr/share/elasticsearch/config/certs
      - es01data:/usr/share/elasticsearch/data
    ports:
      - ${ELASTIC_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.enabled=true
      - xpack.security.enrollment.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --user elastic:${ELASTIC_PASSWORD} --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt -X GET https://es01:9200/_cluster/health?pretty | grep status | grep -q '\\(green\\|yellow\\)'"
        ]
      interval: 10s
      timeout: 10s
      retries: 24
    networks:
      - elastic-web
  es02:
    image: olelarsen/elasticsearch
    container_name: es02
    volumes:
      - es02logs:/usr/share/elasticsearch/logs
      - certificates:/usr/share/elasticsearch/config/certs
      - es02data:/usr/share/elasticsearch/data
    ports:
      - ${ELASTIC2_PORT}:9200
    environment:
      - node.name=es02
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.enabled=true
      - xpack.security.enrollment.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --user elastic:${ELASTIC_PASSWORD} --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt -X GET https://es02:9200/_cluster/health?pretty | grep status | grep -q '\\(green\\|yellow\\)'"
        ]
      interval: 10s
      timeout: 10s
      retries: 24
    networks:
      - elastic-web
  elastic_setup:
    container_name: elastic_setup
    image: olelarsen/elastic-setup
    build:
      context: ./.docker/build/setup/.
      args:
        STACK_VERSION: ${STACK_VERSION}
    volumes:
      - certificates:/usr/share/elasticsearch/config/certs
    user: "0"
    restart: "no"
    command: >
      bash -c '
        if [ ! -d "config/certs/ca" ] 
        then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
          rm -rf config/certs/ca.zip;
        else
          ls -la config/certs/ca;
        fi;

        if [ ! -d "config/certs/es01" ] 
        then
          echo "Creating certificates es01";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
          rm -rf config/certs/certs.zip;
          rm config/certs/instances.yml;
        else
          ls -la config/certs/es01;
        fi;

        if [ ! -d "config/certs/es02" ] 
        then
          echo "Creating certificates es02";
          echo -ne \
          "instances:\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
          rm -rf config/certs/certs.zip;
          rm config/certs/instances.yml;
        else
          ls -la config/certs/es02;
        fi;

        if [ ! -d "config/certs/kibana" ] 
        then
          echo "Creating certificates kibana";
          echo -ne \
          "instances:\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
          rm -rf config/certs/certs.zip;
          rm config/certs/instances.yml;
        else
          ls -la config/certs/kibana;
        fi;
        echo "done";
      '
    networks:
      - elastic-web
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
  elastic_credentials:
    container_name: elastic_credentials
    image: olelarsen/elastic-setup
    build:
      context: ./.docker/build/setup/.
      args:
        STACK_VERSION: ${STACK_VERSION}
    restart: "no"
    volumes:
      - certificates:/usr/share/elasticsearch/config/certs:rw
    user: "0"
    command: >
      bash -c '
        echo "Setting file permissions";
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        echo "Waiting for Elasticsearch ES01 availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:${ELASTIC_PORT} | grep -q "missing authentication credentials"; do sleep 30; done;

        echo "Waiting for Elasticsearch ES02 availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es02:${ELASTIC_PORT} | grep -q "missing authentication credentials"; do sleep 30; done;

        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:${ELASTIC_PORT}/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        
        echo "Setting kibana_system dev password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es02:${ELASTIC_PORT}/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        

        echo "All done!";
      '
    networks:
      - elastic-web
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
    depends_on:
      - es01
      - es02
  kibana_es01:
    container_name: kibana_es01
    depends_on:
      - es01
    image: olelarsen/kibana
    build:
      context: ./.docker/build/kibana/.
      args:
        STACK_VERSION: ${STACK_VERSION}
        KIBANA_PORT: ${KIBANA_PORT}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - es01kibanalogs:/usr/share/kibana/logs
      - certificates:/usr/share/kibana/config/certs:rw
      - es01kibana:/usr/share/kibana/data
    networks:
      - elastic-web
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:${ELASTIC_PORT}
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - xpack.reporting.roles.enabled=false
      - ELASTICSEARCH_PUBLICBASEURL=https://es01:${ELASTIC_PORT}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://kibana_es01:${KIBANA_PORT} | grep -q 'HTTP/1.1 302 Found'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  kibana_es02:
    container_name: kibana_es02
    depends_on:
      - es02
    image: olelarsen/kibana
    build:
      context: ./.docker/build/kibana/.
      args:
        STACK_VERSION: ${STACK_VERSION}
        KIBANA_PORT: ${KIBANA2_PORT}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - es02kibanalogs:/usr/share/kibana/logs
      - certificates:/usr/share/kibana/config/certs:rw
      - es02kibana:/usr/share/kibana/data
    networks:
      - elastic-web
    ports:
      - "${KIBANA2_PORT}:5601"
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es02:${ELASTIC2_PORT}
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - xpack.reporting.roles.enabled=false
      - ELASTICSEARCH_PUBLICBASEURL=https://es02:${ELASTIC2_PORT}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://kibana_es02:${KIBANA_PORT} | grep -q 'HTTP/1.1 302 Found'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
volumes:
  certificates:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: ./.docker/certs
      o: bind
  es01data:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: ./.docker/data/elasticsearch/es01
      o: bind
  es01logs:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: ./.docker/logs/elasticsearch/es01
      o: bind
  es02data:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: ./.docker/data/elasticsearch/es02
      o: bind
  es02logs:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: ./.docker/logs/elasticsearch/es02
      o: bind
  es01kibana:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: ./.docker/data/kibana/es01
      o: bind
  es01kibanalogs:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: ./.docker/logs/kibana/es01
      o: bind
  es02kibana:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: ./.docker/data/kibana/es02
      o: bind
  es02kibanalogs:
    driver: local # Define the driver and options under the volume name
    driver_opts:
      type: none
      device: ./.docker/logs/kibana/es02
      o: bind
  
networks:
  elastic-web:
    name: elastic-web
    driver: bridge

